/* This file contains DAX measures that I've found useful. 
Notes:
 - Make sure the date dimension is marked as a date table for time intelligence functions to work properly.
 - Check data types when loading the model and creating measures.
 - Check table relationships in the model tab to ensure proper functioning of measures. 
 - Remember to update table and column names when reusing these.
*/

-- Last 12 Month Sales (with proper date table)
L12MSales = 
VAR _NumOfMonths = -12

RETURN
CALCULATE (
    SUMX (
        VALUES ( 'Date'[YearMonth] ),
        [Total Sales]
    ),
    DATESINPERIOD ( 'Date'[Date],  MAX ( 'Date'[Date] ), _NumOfMonths, MONTH )
)

-- Last 12 Month Sales (using raw datekey value)
L12MSales = 
VAR vMax = MAX(SlicerDate[Date Key])
VAR vMin = vMax - 10000
VAR vL12M = 
CALCULATE (
    SUM('Table'[Sales]),
    'Table'[Date Key] < vMax,
    'Table'[Date Key] >= vMin
    )
RETURN
vL12M

-- Last 12 Month Sales Growth
vs PY% = 
VAR _CY = [Total Sales]
VAR _PY = CALCULATE (
    [Total Sales],
    /*PREVIOUSMONTH( 'Date'[Date] )  //Added for measure testing*/
    SAMEPERIODLASTYEAR( Dates[Date] )
)
VAR Result = DIVIDE(
    _CY - _PY,
    _PY
)
RETURN
    Result

-- Last 3 Month Sales (without proper date table)
L3MSales = 
VAR vMax = MAX(SlicerDate[Date Key]) -- Does not work well if we are going back over years, like in 20240101
VAR vMin = vMax - 300
VAR vL3M = 
CALCULATE (
    SUM('Table'[Sales]),
    'Table'[Date Key] < vMax,
    'Table'[Date Key] >= vMin
    )
RETURN
vL3M

-- Last 3 Month Sales (with proper date table)
L3MSales = 
VAR _NumOfMonths = -3

RETURN
CALCULATE (
    SUMX (
        VALUES ( 'Date'[YearMonth] ),
        [Total Sales]
    ),
    DATESINPERIOD ( 'Date'[Date],  MAX ( 'Date'[Date] ), _NumOfMonths, MONTH )
)

-- Last 3 Month Sales Growth 
vs L3M% = 
VAR _CM = [L3MSales]
VAR _P3M = CALCULATE (
    [L3MSales],
    PARALLELPERIOD( 'Date'[Date], -3, MONTH )
)
VAR Result = DIVIDE(
    _CM - _P3M,
    _P3M
)
RETURN
    Result

-- Last Month Sales 
L1MSales = [Total Sales]

-- Last Month Sales (this may not be needed since when there is a month slicer on the page, the sum of sales would be filtered to the selected month already) 
L1MSales = 
VAR vMax = MAX(SlicerDate[Date Key])
VAR vMin = vMax - 100 -- Does not work well if we are going back over years, like in 20240101
VAR vLM = 
CALCULATE (
    SUM('Table'[Sales]),
    'Table'[Date Key] < vMax,
    'Table'[Date Key] >= vMin
    )
RETURN
vLM

-- Last Month Sales Growth 
vs LM% = 
VAR _CM = [L1MSales]
VAR _PM = CALCULATE (
    [L1MSales],
    PREVIOUSMONTH( 'Date'[Date] )
)
VAR Result = DIVIDE(
    _CM - _PM,
    _PM
)
RETURN
    Result


-- Last 12 Month Sales using EDATE()
L12MSales = 
VAR vMax = MAX(SlicerDate[Date Key])
VAR vMin = VALUE(FORMAT(EDATE(MAX(SlicerDate[Date]),-12),"YYYYMMDD"))
VAR vL12M = 
CALCULATE (
    SUM('Table'[Sales]),
    'Table'[Date Key] < vMax,
    'Table'[Date Key] >= vMin
    )
RETURN
vL12M

-- Calculate CAGR 
2YrRolling CAGR =
VAR _YearsBack = 2
VAR _CY = CALCULATE (
    SUMX (
        VALUES ( 'Date'[YearMonth] ), // This should match the date slicer being used
        [Sales]
    ),
    DATESINPERIOD( 'Date'[Date],  MAX ( 'Date'[Date] ), -12, MONTH )
)
VAR _PY = CALCULATE(
    SUMX (
        VALUES ( 'Date'[YearMonth] ),
        [Sales]
    ),
    DATEADD( DATESINPERIOD( 'Date'[Date],  MAX ( 'Date'[Date] ), -12, MONTH ), -1 * _YearsBack, YEAR )
)
VAR _OverallGrowth = DIVIDE(
    _CY ,
    _PY,
    0
)
VAR _CAGR = POWER( ( _OverallGrowth), (1 / _YearsBack) ) - 1
RETURN
    _CAGR

-- Calculate Sales YTD
Sales YTD = CALCULATE( 
    SUM( 'Table'[column] ), 
    DATESYTD( 'Date'[Date] ) 
) 

-- Sales FYTD
Sales FYTD = CALCULATE( 
    SUM( 'Table'[column] ), 
    DATESYTD( 'Date'[Date], "end date of fiscal year e.g. 9-30" ) 
)

-- Sales QTD (calendar)
Sales QTD = CALCULATE( 
    SUM( 'Table'[column] ), 
    DATESQTD( 'Date'[Date] ) 
)